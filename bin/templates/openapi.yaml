openapi: 3.0.3
info:
  title: API Description
  description: API NodeJS
  version: 1.0.0
  termsOfService: http://localhost
  contact:
    name: Your Name
    email: email@domain.com
  license:
    name: "ISC"
    url: http://localhost
servers:
  - url: http://localhost:7003/api/v1
    description: Development Server
  # - url: http://dev-apilocavia.infosistemas.com.br:7003/api/v1
  #   description: Development Server
#     variables:
#       port:
#         enum:
#           - "7000"
#         default: "7000"
#       basePath:
#         default: api/v1
#   - url: http://localhost:{port}/{basePath}
#     description: Production Server
#     variables:
#       port:
#         enum:
#           - "8000"
#         default: "8000"
#       basePath:
#         default: api/v1
  
# ordem alfabetica A-Z
tags:
  - name: Auth
    description: "Token de acesso"
  - name: Usuarios
    description: "Dados de Usu치rios"

paths:
 # Auth #
  /auth/access-token:
    post:
      tags:
        - Auth
      summary: Obtem um token de acesso
      operationId: accessToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'
        400:
          $ref: '#/components/responses/badRequestResponse' 
        401:
          $ref: '#/components/responses/unauthorizedResponse' 
        500:
          $ref: '#/components/responses/internalServerErrorResponse' 

  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Atualiza o token de acesso
      operationId: refreshToken
      parameters:
        - in: header
          name: X-API-Key
          schema:
            type: string
          allowReserved: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'
        400:
          $ref: '#/components/responses/badRequestResponse' 
        401:
          $ref: '#/components/responses/unauthorizedResponse' 
        500:
          $ref: '#/components/responses/internalServerErrorResponse' 

 # Usuarios Routes #
  /usuarios/{id}:
    get:
      tags:
        - Usuarios
      summary: Recupera dados de usu치rios
      operationId: getUsuario
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/usuarioResponse"
        400:
          $ref: '#/components/responses/badRequestResponse' 
        401:
          $ref: '#/components/responses/unauthorizedResponse' 
        500:
          $ref: '#/components/responses/internalServerErrorResponse' 
  /usuarios:
    get:
      tags:
        - Usuarios
      summary: Recupera dados de usu치rios
      operationId: getUsuarios
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: nome
          required: true
          allowReserved: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/usuarioResponse"
        400:
          $ref: '#/components/responses/badRequestResponse' 
        401:
          $ref: '#/components/responses/unauthorizedResponse' 
        500:
          $ref: '#/components/responses/internalServerErrorResponse' 
    post:
      tags:
        - Usuarios
      summary: Registra um usu치rio no sistema
      operationId: postUsuario
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nomeUsuario:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  description: "CryptoJS: mode.CBC pad.Pkcs7"
        required: true
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postResponse"
        400:
          $ref: '#/components/responses/badRequestResponse' 
        401:
          $ref: '#/components/responses/unauthorizedResponse' 
        500:
          $ref: '#/components/responses/internalServerErrorResponse' 
components:
  responses:
    badRequestResponse:      
      description: BAD_REQUEST
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    unauthorizedResponse:      
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    internalServerErrorResponse:
        description: INTERNAL_SERVER_ERROR
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/errorResponse"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    errorResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
            status:
              type: string
    apiResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            message:
              type: string
    authResponse:              
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
            issuedAt:
              type: integer
            expiresAt:
              type: integer                  
    usuarioResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: number
            nome:
              type: string
            email:
              type: string
            inseridoEm:
              type: string
              description: Date
    postResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
            message:
              type: string