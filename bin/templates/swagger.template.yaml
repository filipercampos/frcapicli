swagger: '2.0'
info:
  description: 'API Description'
  version: '1.0.0'
  title: 'API Title'
  contact:
    email: 'email@domain.com'
host: 'localhost:8041' 
basePath: '/api/v1'
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Auth
  - name: Users

#Paths resource API
paths:

 # Auth Route #
  /auth/access-token:
    x-swagger-router-controller: "user.controller"
    post:
      tags:
        - "Users"
      summary: "Realiza o login do usuário"
      description: "Recupera a token para acesso aos recursos da API"
      operationId: "postAuth"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto JSON com os dados do login"
        required: true
        schema:
            $ref: '#/definitions/authRequest'  
      responses:
        "200":
          description: "Retorna o token de acesso"
          schema:
            $ref: "#/definitions/authResponse"
        default:
          description: Erro
          schema:
            $ref: "#/definitions/errorResponse"  
 # Users Route #
  /users:
    x-swagger-router-controller: user.controller
    get:
      tags:
        - Users
      summary: Recupera dados de usuários
      description: 'Recupera dados de usuários'
      operationId: getUsers
      parameters: 
      - in: query
        name: name
        type: string
      - in: query
        name: cpf
        type: string
      - in: query
        name: email
        type: string
      - in: query
        name: offset
        type: integer
        format: int32     
      - in: query
        name: limit
        type: integer
        format: int32 
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/getUsersResponse'
        "401":
            description: UNAUTHORIZED
            schema: 
              $ref: '#/definitions/errorResponse' 
    post:
      tags: 
        - Users
      summary: Register a user
      description: Register a user
      operationId: postUser
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/postUserRequest'
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/postResponse'
        "403":
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/errorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errorUserPostResponse'
  /users/{id}:
    x-swagger-router-controller: user.controller
    get:
      tags:
        - Users
      summary: Get user data from id
      description: Get user data from id
      operationId: getUserById
      parameters:
      - in: path
        name: id
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/getUserResponse'
        "401":
            description: UNAUTHORIZED
            schema: 
              $ref: '#/definitions/errorResponse'
    put:
      tags:
        - "Users"
      summary: "Atualiza os dados do usuário"
      description: "Atualiza os dados do usuário"
      operationId: "putUser"
      parameters:
      - in: path
        name: id
        required: true
        type: integer
        format: int64 
      - in: "body"
        name: "body"
        description: "Objeto JSON com os dados do usuário"
        required: true
        schema:
            $ref: '#/definitions/putUserRequest'  
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/putResponse'
        "401":
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/errorResponse'
    patch:
      tags:
        - Users
      summary: Altera os dados do usuário
      description: 'Altera os dados do usuário'
      operationId: patchUser
      parameters:
      - in: path
        name: id
        required: true
        type: integer
        format: int64 
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/patchUserRequest'  
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/patchResponse'
        "401":
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/errorResponse'

# Definitions #       
definitions:

# Requests #

 # Auth
  authRequest:
    type: object
    properties:
      username:
        type: string
        description: "Nome de usuário ou email"
      password:
        type: string
 # Request Users
  # Users POST Request # 
  postUserRequest:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      senha:
        type: string

  # Users PUT Request #
  putUserRequest:
    type: object
    properties:
      name:
        type: string

  # Users PATCH Request #
  patchUserRequest:
    type: object
    properties:
      currentPassword:
        type: string
      password:
        type: string
# End Request

# Common Response #
  errorResponse:
    type: object
    properties:
      message:
        type: string
  putResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          rowsAffected:
            type: integer
            format: int64
          message:
            type: string
  postResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          insertId:
            type: integer
            format: int64
          message:
            type: string
  patchResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          rowsAffected:
            type: integer
            format: int64
          message:
            type: string
  deleteResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          insertId:
            type: integer
            format: int64
# End Common Response #

# Responses # 

  # Login
  authResponse:
    properties:
      token:
        type: string
        description: 'base64-encoded'

  # Users #
  getUsersResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/userResponse'
  getUserResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/userResponse'
  userResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      dataNascimento:
        type: integer
        format: int64
        description: 'Valor timestamp'
      email:
        type: string
# End Response 


# enums
  # myEnum:
  #   type: string
  #   enum: [ ..., ... ]
# enum response => specific error
  errorUserPostResponse:
    type: object
    properties:
      message:
        type: string
        enum: [ EMAIL_EXISTS ]                     