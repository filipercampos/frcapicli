swagger: '2.0'
info:
  description: 'API Description'
  version: '1.0.0'
  title: 'API Title'
  contact:
    email: 'email@domain.com'
host: 'localhost:8041' 
basePath: '/api/v1'
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Usuarios

#Paths resource API
paths:

 # Usuarios Route #
  /usuarios/login:
    x-swagger-router-controller: "usuario.controller"
    post:
      tags:
        - "Usuarios"
      summary: "Realiza o login do usuário"
      description: "Recupera a token para acesso aos recursos da API"
      operationId: "postLogin"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto JSON com os dados do login"
        required: true
        schema:
            $ref: '#/definitions/loginRequest'  
      responses:
        "200":
          description: "Retorna o token de acesso"
          schema:
            $ref: "#/definitions/loginResponse"
        default:
          description: Erro
          schema:
            $ref: "#/definitions/errorResponse"  

  /usuarios:
    x-swagger-router-controller: usuario.controller
    get:
      tags:
        - Usuarios
      summary: Recupera dados de usuários
      description: 'Recupera dados de usuários'
      operationId: getUsuarios
      parameters: 
      - in: query
        name: nome
        type: string
      - in: query
        name: cpf
        type: string
      - in: query
        name: email
        type: string
      - in: query
        name: numeroPagina
        type: integer
        format: int32     
      - in: query
        name: linhasPagina
        type: integer
        format: int32 
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/getUsuariosResponse'
        "403":
            description: Acesso Negado
            schema: 
              $ref: '#/definitions/errorResponse' 
    post:
      tags: 
        - Usuarios
      summary: Cadastro de usuário
      description: 'Cadastro de usuário'
      operationId: postUsuario
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/postUsuarioRequest'
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/postResponse'
        "403":
          description: Acesso Negado
          schema:
            $ref: '#/definitions/errorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errorUsuarioPostResponse'
              
  /usuarios/{id}:
    x-swagger-router-controller: usuario.controller
    get:
      tags:
        - Usuarios
      summary: Recupera dados do usuário
      description: 'Recupera dados do usuário'
      operationId: getUsuario
      parameters:
      - in: path
        name: id
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/getUsuarioResponse'
        "403":
            description: Acesso Negado
            schema: 
              $ref: '#/definitions/errorResponse'
    put:
      tags:
        - "Usuarios"
      summary: "Atualiza os dados do usuário"
      description: "Atualiza os dados do usuário"
      operationId: "putUsuario"
      parameters:
      - in: path
        name: id
        required: true
        type: integer
        format: int64 
      - in: "body"
        name: "body"
        description: "Objeto JSON com os dados do usuário"
        required: true
        schema:
            $ref: '#/definitions/putUsuarioRequest'  
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/putResponse'
        "403":
          description: Acesso Negado
          schema:
            $ref: '#/definitions/errorResponse'
    patch:
      tags:
        - Usuarios
      summary: Altera os dados do usuário
      description: 'Altera os dados do usuário'
      operationId: patchUsuario
      parameters:
      - in: path
        name: id
        required: true
        type: integer
        format: int64 
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/patchUsuarioRequest'  
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/patchResponse'
        "403":
          description: Acesso Negado
          schema:
            $ref: '#/definitions/errorResponse'

# Definitions #       
definitions:

# Requests #

 # Login
  loginRequest:
    type: object
    properties:
      username:
        type: string
        description: "Nome de usuário ou email"
      password:
        type: string
 # Request Usuarios
  # Usuarios POST Request # 
  postUsuarioRequest:
    type: object
    properties:
      nome:
        type: string
      email:
        type: string
      senha:
        type: string

  # Usuarios PUT Request #
  putUsuarioRequest:
    type: object
    properties:
      nome:
        type: string

  # Usuarios PATCH Request #
  patchUsuarioRequest:
    type: object
    properties:
      senhaAtual:
        type: string
      novaSenha:
        type: string
# End Request

# Common Response #
  errorResponse:
    type: object
    properties:
      message:
        type: string
  putResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          rowsAffected:
            type: integer
            format: int64
          message:
            type: string
  postResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          insertId:
            type: integer
            format: int64
          message:
            type: string
  patchResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          rowsAffected:
            type: integer
            format: int64
          message:
            type: string
  deleteResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          insertId:
            type: integer
            format: int64
# End Common Response #

# Responses # 

  # Login
  loginResponse:
    properties:
      token:
        type: string
        description: 'base64-encoded'

  # Usuarios #
  getUsuariosResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/usuarioResponse'
  getUsuarioResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/usuarioResponse'
  usuarioResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      nome:
        type: string
      dataNascimento:
        type: integer
        format: int64
        description: 'Valor timestamp'
      email:
        type: string
# End Response 



# enums
  # myEnum:
  #   type: string
  #   enum: [ ..., ... ]
# enum response => specific error
  errorUsuarioPostResponse:
    type: object
    properties:
      message:
        type: string
        enum: [ CPF_CADASTRADO, EMAIL_CADASTRADO, CELULAR_CADASTRADO ]     
                